package app.smarthome.zzd.smarthome;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.loopj.android.http.RequestHandle;
import com.umeng.analytics.MobclickAgent;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.Vector;

/**
 * Created by inobaa on 15/1/20.
 */
public class FragmentScence extends FragmentForMain {

    private PullToRefreshListView mPullRefreshListView;
    private MessageAdapter          mMessagesAdapter;

    public class MessageAdapter extends BaseAdapter {

        public int mTotal = -1;
        public int mNext = 0;
        public int mPrev = 0;
        private RequestHandle mReqSearch = null;

        private LayoutInflater mInflater;
        public Vector<JSONObject> mMessages = new Vector<>();

        public JSONObject MakeQueryJson(){

            JSONObject filter = new JSONObject();
            try {
                filter.put("cursor", mNext);
                filter.put("limit", Config.KPageSizeTutor);
            } catch (Exception e) {
            }
            return filter;
        }
        public void Refresh() {
            if (mReqSearch != null) {
                mReqSearch.cancel(false);
                mReqSearch = null;
            }

            mNext = 0;
            mPrev = 0;
            mTotal = -1;
            mMessages.clear();

            Log.d(Config.TagForLog, "start get Messages");
            JSONObject filter = MakeQueryJson();
//            mReqSearch = ServerClient.GetMessages(filter, mOnGotData);
        }
        protected AppResponseHandler mOnGotData = new AppResponseHandler(){

            public void onReqSuccess(JSONObject arg0) {
                mReqSearch = null;
                try {
                    JSONObject payload = arg0.getJSONObject("payload");
                    mTotal = payload.getInt("total_number");
                    mNext = payload.getInt("next_cursor");
                    mPrev = payload.getInt("previous_cursor");
                    JSONArray users = payload.getJSONArray("messages");
                    for (int i = 0; i < users.length(); ++i) {
                        JSONObject tui = users.getJSONObject(i);
                        mMessages.add(tui);
                    }
                } catch (Exception e) {
                }
                notifyDataSetChanged();
                mPullRefreshListView.onRefreshComplete();
            };
            public void onReqFailure(String msg) {
                mReqSearch = null;
                mPullRefreshListView.onRefreshComplete();
                Log.d(Config.TagForLog, "GetMessages failed: " + msg);
                if (getActivity() != null){
//                    Toast.makeText(getActivity(), msg, Toast.LENGTH_LONG).show();
                    new AlertDialog.Builder(FragmentScence.this.getActivity())
                            .setMessage(msg)
                            .setPositiveButton(R.string.action_ok, null)
                            .show();
                    }
            };
        };

        public void LoadMore() {
            if (mReqSearch != null) return;
            if (mTotal >= 0 && mNext >= mTotal) return;

            JSONObject filter = MakeQueryJson();
//            mReqSearch = ServerClient.GetMessages(filter, mOnGotData);
        }

        public MessageAdapter(Context context) {
            this.mInflater = LayoutInflater.from(context);
        }

        @Override
        public int getCount() {
            return mMessages.size();
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
//            ListItemMessageInfo liTutor = (ListItemMessageInfo) mInflater.inflate(R.layout.li_message_info, null);
//            convertView = liTutor;
//
//            JSONObject tutor = mMessages.get(position);
//            liTutor.SetMessageInfo(tutor);

            return convertView;
        }
        @Override
        public Object getItem(int arg0) {
            return null;
        }

        @Override
        public long getItemId(int arg0) {
            return 0;
        }
    }

    public FragmentScence() {
    }
    public void onResume() {
        super.onResume();
        MobclickAgent.onPageStart("FragmentMessages"); //统计页面
    }
    public void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("FragmentMessages");
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View rootView = super.onCreateView(inflater, container, savedInstanceState, R.layout.fragment_listview);
        mTxtHeaderTitle.setText(R.string.tbi_scence);

        mPullRefreshListView = (PullToRefreshListView) rootView.findViewById(R.id.pull_refresh_list);

        // Set a listener to be invoked when the list should be refreshed.
        mPullRefreshListView.setOnRefreshListener(new PullToRefreshBase.OnRefreshListener<ListView>() {
            @Override
            public void onRefresh(PullToRefreshBase<ListView> refreshView) {
                mMessagesAdapter.Refresh();
            }
        });

        // Add an end-of-list listener
        mPullRefreshListView.setOnLastItemVisibleListener(new PullToRefreshBase.OnLastItemVisibleListener() {
            @Override
            public void onLastItemVisible() {
                mMessagesAdapter.LoadMore();
            }
        });

        RelativeLayout emptyView = (RelativeLayout)this.getActivity().getLayoutInflater().inflate(R.layout.li_one_text, null);
        TextView etv = (TextView) emptyView.findViewById(R.id.txt_tag_name);
        etv.setText(R.string.has_no_message);
        mPullRefreshListView.setEmptyView(emptyView);

        mPullRefreshListView.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                JSONObject msg = mMessagesAdapter.mMessages.get(position - 1);
                try{
                    String url = msg.getString("url");
                    Intent intent = new Intent();
                    intent.putExtra("url", url);
                    intent.setClass(getActivity(), ActivityWebView.class);
                    startActivityForResult(intent, 0);
                }catch (JSONException e){
                    e.printStackTrace();
                }
            }
        });
        if (mMessagesAdapter == null){
            mMessagesAdapter = new MessageAdapter(getActivity());
            new Handler().postDelayed(new Runnable() {
                @Override
                public void run() {
                    mPullRefreshListView.setRefreshing();
                }
            }, 2000);
        }
        mPullRefreshListView.setAdapter(mMessagesAdapter);
        return rootView;
    }
}