package app.smarthome.zzd.smarthome;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.GridView;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshGridView;
import com.loopj.android.http.RequestHandle;
import com.umeng.analytics.MobclickAgent;
import com.util.Common;

import org.json.JSONArray;
import org.json.JSONObject;
import org.w3c.dom.Text;

import java.util.TimerTask;
import java.util.Vector;

import app.smarthome.zzd.smarthome.Config.DeviceType;
import app.smarthome.zzd.smarthome.model.DeviceInfo;
import app.smarthome.zzd.smarthome.model.RoomInfo;
import app.smarthome.zzd.smarthome.view.AdbannerView;
import app.smarthome.zzd.smarthome.view.RoomDevicePager;
import app.smarthome.zzd.smarthome.view.RoomListView;

/**
 * Created by inobaa on 15/1/20.
 */
public class FragmentDevices extends FragmentForMain {

    private final static int ACTIVITY_SCAN_QRCODE = 100;
    private final static int ACTIVITY_DEVICE_DETAIL = 101;
    private final static int ACTIVITY_ROOM_LIST = 102;

    private ProgressDialog          mProgDialog;

    private RoomListView            mLyRooms;
    private RoomDevicePager         mDevicePager;
    private AdbannerView            mAdView;
    private LayoutInflater          mInflater;

    public FragmentDevices() {
    }

    private BroadcastReceiver mReceiver = new BroadcastReceiver() {
        @Override
        public void onReceive(Context context, Intent intent) {
            String action = intent.getAction();
            if (action.equals(Config.BoardcastZzdChangeFamily)
                    || action.equals(Config.BoardcastZzdDevicesUpdate)) {
                mLyRooms.Reload(mInflater);
                mDevicePager.Init(mInflater, mLyRooms.mAllRooms);
                mDevicePager.SetRoomId(mLyRooms.CurrentRoomId(), false);
            }
            else if(action.equals(Config.BoardcastZzdDevicesRuntime)){
                mDevicePager.ReloadStatus();
            }
            else if(action.equals(Config.BoardcastZzdAdbannerUpdate)){
                mAdView.ReLoad(mInflater, 0);
            }
        }
    };
    public void onResume() {
        super.onResume();
        MobclickAgent.onPageStart("FragmentDevices"); //统计页面
    }
    public void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("FragmentDevices");
    }
    public void OnHeaderRightClick(){
        Intent intent = new Intent();
        intent.setClass(getActivity(), ActivityCaptureQR.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        startActivityForResult(intent, ACTIVITY_SCAN_QRCODE);

//        Intent intent = new Intent();
//        intent.setClass(getActivity(), ActivityDeviceDetail.class);
//        intent.putExtra("code", "9skdfo2uie9ID:0001012cSN:09duf2oj");
//        startActivityForResult(intent, ACTIVITY_DEVICE_DETAIL);
    }

    public class ToggleDeviceResp extends AppResponseHandler
    {
        DeviceInfo.DevicePortInfo mPort;
        long mDeviceId;
        long mToSts;
        RequestHandle mReqHandle;

        public void Start(){
            mDevicePager.StartControl(mDeviceId, mPort.mPortId, mToSts);
            mReqHandle = ServerClient.ControlDevice(mDeviceId, mPort.mPortId, mToSts, this);
        }

        ToggleDeviceResp(long lDeviceId, DeviceInfo.DevicePortInfo p, long toSts){
            mDeviceId = lDeviceId;
            mPort = p;
            mToSts = toSts;
        }
        public void onReqSuccess(JSONObject arg0) {
            mReqHandle = null;

            mPort.mStatus = mToSts;

            mDevicePager.FinishControl(mDeviceId, mPort.mPortId);
        };

        public void onReqFailure(String msg) {
            mReqHandle = null;
            Toast.makeText(getActivity(), msg, Toast.LENGTH_LONG).show();

            mDevicePager.FinishControl(mDeviceId, mPort.mPortId);
        };
    }
    public void OnToggleDevice(long lDeviceId, long lDataId) {
        final DeviceInfo d = AppCache.mDevices.get(lDeviceId);
        if (d == null) return;
        final DeviceInfo.DevicePortInfo p = d.mPorts.get(lDataId);
        if (p == null) return;

        final long toSts = p.mStatus == 0 ? 1 : 0;

        ToggleDeviceResp tdr = new ToggleDeviceResp(lDeviceId, p, toSts);
        tdr.Start();
    }

    private RequestHandle sReqDeleteDevice = null;
    private void DeleteDevice(long lDeviceId, long lDataId){
        final long selDevId = lDeviceId;
        final long selDataId = lDataId;

        if (sReqDeleteDevice != null) return;
        AppResponseHandler onDeleteOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqDeleteDevice = null;
                mProgDialog.hide();

                DeviceInfo d = AppCache.mDevices.get(selDevId);
                if (d != null){
                    d.mPorts.remove(selDataId);
                }
                AppCache.ListDevices();

                Intent intent = new Intent();
                intent.setAction(Config.BoardcastZzdDevicesUpdate);
                getActivity().sendBroadcast(intent);

                Toast.makeText(getActivity(), getString(R.string.del_finished), Toast.LENGTH_LONG).show();
            }

            ;

            public void onReqFailure(String msg) {
                sReqDeleteDevice = null;
                mProgDialog.hide();
                Toast.makeText(getActivity(), msg, Toast.LENGTH_LONG).show();
            }

            ;
        };
        mProgDialog.show();
        sReqDeleteDevice = ServerClient.DeleteDevice(selDevId, selDataId, onDeleteOK);
    }
    public void onLongTouch(long lDeviceId, long lDataId) {
        final long selDevId = lDeviceId;
        final long selDataId = lDataId;

        String[] options = new String[2];
        options[0] = getString(R.string.action_edit);
        options[1] = getString(R.string.action_delete);
        new AlertDialog.Builder(getActivity())
                .setItems(options, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        if (i == 1) {
                            String strTitle = getString(R.string.del_device);
                            new AlertDialog.Builder(getActivity())
                                    .setTitle(strTitle)
                                    .setMessage(R.string.tip_del_cannot_undo)
                                    .setPositiveButton(getString(R.string.action_delete), new DialogInterface.OnClickListener() {
                                        public void onClick(DialogInterface dialog, int which) {
                                            DeleteDevice(selDevId, selDataId);
                                        }
                                    })
                                    .setNegativeButton(getString(R.string.action_cancel), null)
                                    .show();
                        }
                        else if (i == 0) {
                            Intent intent = new Intent();
                            intent.setClass(getActivity(), ActivityDeviceDetail.class);
                            intent.putExtra("device_id", selDevId);
                            intent.putExtra("data_id", selDataId);
                            startActivityForResult(intent, ACTIVITY_SCAN_QRCODE);
                        }
                    }
                })
                .show();
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        switch (requestCode & 0x0000FFFF) {
            case ACTIVITY_SCAN_QRCODE:
                if(resultCode == Activity.RESULT_OK){
                    Bundle bundle = data.getExtras();
                    String strResult = bundle.getString("result");

                    Intent intent = new Intent();
                    intent.setClass(getActivity(), ActivityDeviceDetail.class);
                    intent.putExtra("code", strResult);
                    startActivityForResult(intent, ACTIVITY_DEVICE_DETAIL);
                }
                else if(resultCode == Activity.RESULT_FIRST_USER){

                    Intent intent = new Intent();
                    intent.setClass(getActivity(), ActivityDeviceDetail.class);
                    startActivityForResult(intent, ACTIVITY_DEVICE_DETAIL);
                }
                break;
            case ACTIVITY_ROOM_LIST:
                mLyRooms.Reload(mInflater);
                break;
        }
        super.onActivityResult(requestCode, resultCode, data);
    }

    public void onDestroy() {
        getActivity().unregisterReceiver(mReceiver);
        super.onDestroy();
    }
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        mInflater = inflater;
        View rootView = super.onCreateView(inflater, container, savedInstanceState, R.layout.fragment_devices);
        mTxtHeaderTitle.setText(R.string.tbi_devices);
        mBtnHeaderRight.setVisibility(View.VISIBLE);

        mLyRooms = (RoomListView)rootView.findViewById(R.id.ly_rooms);
        mLyRooms.SetOnRoomChangedListener(new RoomListView.OnRoomChangedListener() {
            @Override
            public void onChanged(long lNewRoomId) {
                mDevicePager.SetRoomId(lNewRoomId, false);
            }
            @Override
            public void onRoomModify(){
                Intent intent = new Intent();
                intent.setClass(getActivity(), ActivityRoomList.class);
                startActivityForResult(intent, ACTIVITY_ROOM_LIST);
            }
        });

        mDevicePager = (RoomDevicePager)rootView.findViewById(R.id.view_pager_devices);
        mDevicePager.SetOnRoomDeviceListener(new RoomDevicePager.OnRoomDeviceListener() {
            @Override
            public void onDeviceClick(long lDeviceId, long lDataId) {
                OnToggleDevice(lDeviceId, lDataId);
            }

            @Override
            public void onDeviceLongTouch(long lDeviceId, long lDataId) {
                FragmentDevices.this.onLongTouch(lDeviceId, lDataId);
            }

            @Override
            public void onRoomChanged(long lRoomId, int iRoomIndex) {
                mLyRooms.SetCurrentRoomId(lRoomId, false);
            }
        });

        mAdView = (AdbannerView)rootView.findViewById(R.id.view_pager_adbanner);
        mAdView.ReLoad(mInflater, 2);
        int suitH = Common.getScreenWidth(getActivity()) * 20 / 72;
        ViewGroup.LayoutParams lp = mAdView.getLayoutParams();
        lp.height = suitH;
        mAdView.setLayoutParams(lp);

        mAdView.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mAdView.mVecAdData.size() <= 0) return;
                String strUrl = mAdView.mVecAdData.get(mAdView.getCurrentItem()).mActionUrl;
                if (!Common.isNullString(strUrl)) {
                    Intent intent = new Intent();
                    intent.setClass(getActivity(), ActivityWebView.class);
                    intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
                    intent.putExtra("url", strUrl);
                    startActivity(intent);
                }
            }
        });

        HorizontalScrollView roomLine = (HorizontalScrollView) rootView.findViewById(R.id.ly_rooms_scroll_parent);
        roomLine.setOnLongClickListener(new View.OnLongClickListener() {
            @Override
            public boolean onLongClick(View view) {
                Intent intent = new Intent();
                intent.setClass(getActivity(), ActivityRoomList.class);
                startActivityForResult(intent, ACTIVITY_ROOM_LIST);
                return true;
            }
        });
        mLyRooms.Init(roomLine);
        mLyRooms.Reload(mInflater);
        mDevicePager.Init(mInflater, mLyRooms.mAllRooms);
        mLyRooms.SetCurrentRoomId(0L, true);

        mProgDialog = new ProgressDialog(getActivity());
        mProgDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        mProgDialog.setMessage(getString(R.string.tip_deleteing));
        mProgDialog.setIndeterminate(false);
        mProgDialog.setCancelable(false);

        IntentFilter filter = new IntentFilter();
        filter.addAction(Config.BoardcastZzdChangeFamily);
        filter.addAction(Config.BoardcastZzdDevicesUpdate);
        filter.addAction(Config.BoardcastZzdDevicesRuntime);
        filter.addAction(Config.BoardcastZzdAdbannerUpdate);
        getActivity().registerReceiver(mReceiver, filter);
        return rootView;
    }
}