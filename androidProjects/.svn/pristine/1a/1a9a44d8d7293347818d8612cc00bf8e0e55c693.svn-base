package app.smarthome.zzd.smarthome;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.RequestHandle;
import com.util.Common;
import com.util.db.AppDb;

import org.json.JSONObject;
import org.w3c.dom.Text;

import java.util.TimerTask;
import java.util.Vector;

import app.smarthome.zzd.smarthome.model.DeviceInfo;
import app.smarthome.zzd.smarthome.model.FamilyInfo;
import app.smarthome.zzd.smarthome.model.RoomInfo;

public class ActivityDeviceDetail extends ActivityHeaderBase {

    public static int       KActivityResultCreateFamily = 101;
    public static int       KActivityResultCreateRoom1 = 110;

    final static int        KMaxPortCount = 3;
    private DeviceInfo      mDevice = new DeviceInfo();
    private long            mDataId = -1;

    private ProgressDialog  mProgDialog;

    private LinearLayout    mLyDeviceDetail;
    private RelativeLayout  mLyGateway;
    private RelativeLayout  mLyFamily;

    private RelativeLayout  mLyRooms[] = new RelativeLayout[3];
    private RelativeLayout  mLyNames[] = new RelativeLayout[3];

    private EditText        mEditDeviceId;
    private EditText[]      mEditNames = new EditText[KMaxPortCount];

    private TextView        mTxtQueryId;
    private TextView        mTxtType;
    private TextView        mTxtGateway;
    private TextView        mTxtFamily;
    private TextView[]      mTxtRooms = new TextView[KMaxPortCount];

    @Override
    protected void onDestroy() {
        if(sReqDeviceId != null){
            sReqDeviceId.cancel(true);
            sReqDeviceId = null;
        }
        super.onDestroy();
    }

    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == KActivityResultCreateFamily && resultCode == RESULT_OK) {

            int iIdxSelRoomLy = requestCode - KActivityResultCreateRoom1;
            long lFamilyId = data.getLongExtra("family_id", 0);
            if (lFamilyId > 0){
                String strName = data.getStringExtra("family_name");
                mDevice.mFamilyId = lFamilyId;
                mTxtFamily.setText(strName);
            }
            else{
                OnSelRooms(iIdxSelRoomLy);
            }
        }
        else if (requestCode >= KActivityResultCreateRoom1
                && requestCode <= KActivityResultCreateRoom1 + 10
                && resultCode == RESULT_OK)
        {
            int iIdxSelRoomLy = requestCode - KActivityResultCreateRoom1;
            long lRoomId = data.getLongExtra("room_id", 0);
            if (lRoomId > 0){
                Vector<Long> dataIds = mDevice.getDataIds();
                mDevice.mPorts.get(dataIds.get(iIdxSelRoomLy)).mRoomId = lRoomId;

                String strName = data.getStringExtra("room_name");
                mTxtRooms[iIdxSelRoomLy].setText(strName);
            }
            else{
                OnSelRooms(iIdxSelRoomLy);
            }
        }
    }
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        super.setContentView(R.layout.activity_device_detail);

        mProgDialog = new ProgressDialog(this);
        mProgDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
        mProgDialog.setIndeterminate(false);
        mProgDialog.setCancelable(false);

        mLyDeviceDetail = (LinearLayout)findViewById(R.id.ly_device_detail);
        mLyGateway = (RelativeLayout)findViewById(R.id.ly_gateway);
        mLyGateway.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                OnSelGateway();
            }
        });
        mLyFamily = (RelativeLayout)findViewById(R.id.ly_family);
        mLyFamily.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                OnSelFamily();
            }
        });

        mLyRooms[0] = (RelativeLayout)findViewById(R.id.ly_room1);
        mLyRooms[0].setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                OnSelRooms(0);
            }
        });
        mLyRooms[1] = (RelativeLayout)findViewById(R.id.ly_room2);
        mLyRooms[1].setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                OnSelRooms(1);
            }
        });
        mLyRooms[2] = (RelativeLayout)findViewById(R.id.ly_room3);
        mLyRooms[2].setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                OnSelRooms(2);
            }
        });

        mLyNames[0] = (RelativeLayout)findViewById(R.id.ly_name1);
        mLyNames[1] = (RelativeLayout)findViewById(R.id.ly_name2);
        mLyNames[2] = (RelativeLayout)findViewById(R.id.ly_name3);

        mEditDeviceId = (EditText)findViewById(R.id.edit_device_id);
        mEditDeviceId.setOnFocusChangeListener(new View.OnFocusChangeListener() {
            @Override
            public void onFocusChange(View v, boolean hasFocus) {
                if (!hasFocus){
                    QueryDeviceId();
                }
            }
        });
        mEditDeviceId.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {

            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (s.toString().length() >= 8){
                    QueryDeviceId();
                }
            }
        });
        mEditNames[0] = (EditText)findViewById(R.id.edit_name1);
        mEditNames[1] = (EditText)findViewById(R.id.edit_name2);
        mEditNames[2] = (EditText)findViewById(R.id.edit_name3);

        mTxtQueryId = (TextView)findViewById(R.id.txt_qurry_device);
        mTxtType = (TextView)findViewById(R.id.txt_device_type);
        mTxtGateway = (TextView)findViewById(R.id.txt_gateway);
        mTxtRooms[0] = (TextView)findViewById(R.id.txt_room1);
        mTxtRooms[1] = (TextView)findViewById(R.id.txt_room2);
        mTxtRooms[2] = (TextView)findViewById(R.id.txt_room3);
        mTxtFamily = (TextView)findViewById(R.id.txt_family);

        findViewById(R.id.txt_save_device).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                SaveDevice();
            }
        });
        findViewById(R.id.txt_del_device).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                DeleteWithConfirm();
            }
        });

        Intent intent = getIntent();
        long lDeviceId = intent.getLongExtra("device_id", 0);
        mDataId = intent.getLongExtra("data_id", 0);
        DeviceInfo devInCache = null;
        if (lDeviceId > 0){
            devInCache = AppCache.mDevices.get(lDeviceId);
        }
        if (devInCache == null){
            setTitle(R.string.add_device);
            mLyDeviceDetail.setEnabled(false);
            mTxtQueryId.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View view) {
                    QueryDeviceId();
                }
            });
            String strCode = intent.getStringExtra("code");
            if (strCode != null && strCode.length() >= 14){
                String[] subs1 = strCode.split("ID:");
                if (subs1.length >= 2){
                    String[] subs2 = subs1[1].split("SN:");
                    strCode = subs2[0];
                }
            }
//            strCode = "0001012c";
            if (!Common.isNullString(strCode)){
                mEditDeviceId.setText(strCode);

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        QueryDeviceId();
                    }
                }, 20);
            }
            else{
                mEditDeviceId.requestFocus();
            }
            mTxtFamily.setText("");
            mTxtGateway.setText("");
            for (int i = 0; i < 3; ++i) {
                mTxtRooms[i].setText("");
                mEditNames[i].setText("");
            }
            mLyRooms[1].setVisibility(View.GONE);
            mLyNames[1].setVisibility(View.GONE);
            mLyRooms[2].setVisibility(View.GONE);
            mLyNames[2].setVisibility(View.GONE);
        }
        else{
            mDevice.copyFrom(devInCache);
            mTxtQueryId.setVisibility(View.GONE);
            DispDeviceInfo();
            findViewById(R.id.ly_device_id).setVisibility(View.GONE);
        }
    }

    private RequestHandle sReqDeviceId = null;
    public void QueryDeviceId(){
        if (sReqDeviceId != null) return;

        String strCode = mEditDeviceId.getText().toString();
        if (strCode.length() < 8){
            mEditDeviceId.requestFocus();
            Toast.makeText(ActivityDeviceDetail.this, getString(R.string.tip_id_length8), Toast.LENGTH_LONG).show();
            return;
        }
        //TODO filter the code

        mEditDeviceId.setEnabled(false);
        sReqDeviceId = ServerClient.CreatePreQuery(strCode, new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqDeviceId = null;
                try {
                    JSONObject jo = arg0.getJSONArray("dataList").getJSONObject(0);
                    mDevice.fromJson(jo, false);
                } catch (org.json.JSONException e) {
                    e.printStackTrace();
                    mEditDeviceId.setEnabled(true);
                    return;
                }
                DispDeviceInfo();
                mTxtQueryId.setVisibility(View.GONE);
                mEditNames[0].requestFocus();
            }

            public void onReqFailure(String msg) {
                sReqDeviceId = null;
                mEditDeviceId.setEnabled(true);
                Toast.makeText(ActivityDeviceDetail.this, msg, Toast.LENGTH_LONG).show();
            }

            ;
        });
    }
    private void DispDeviceInfo(){

        mLyDeviceDetail.setVisibility(View.VISIBLE);
        mLyDeviceDetail.setEnabled(true);

        DeviceInfo d = AppCache.mDevices.get(mDevice.mSuperDevId);
        if (d == null){
            mTxtGateway.setText("");
        }
        else{
            mTxtGateway.setText(d.mName);
        }

        if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeGateway){   // show family, name1
            mTxtType.setText(R.string.device_type_gateway);
            mLyGateway.setVisibility(View.GONE);

            mLyFamily.setVisibility(View.VISIBLE);
            FamilyInfo f = AppCache.mFamilies.get(mDevice.mFamilyId);
            if (f == null){
                f = AppCache.mFamilies.get(AppCache.mCurFamilyId);
            }
            mTxtFamily.setText(f.mName);

            mEditNames[0].setText(mDevice.mName);
            mEditNames[0].requestFocus();
        }
        else if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeAdapter10A){   //show ports
            mTxtType.setText(R.string.device_type_adapter_10A);
            showPorts();
        }
        else if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeAdapter16A){
            mTxtType.setText(R.string.device_type_adapter_16A);
            showPorts();
        }
        else if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeSwitch){
            showPorts();
            if (mDevice.mPorts.keySet().size() == 1){
                mTxtType.setText(R.string.device_type_switch1);
            }
            if (mDevice.mPorts.keySet().size() == 2){
                mTxtType.setText(R.string.device_type_switch2);
            }
            if (mDevice.mPorts.keySet().size() == 3){
                mTxtType.setText(R.string.device_type_switch3);
            }
        }
        if (mDevice.mSuperDevId > 0){
            setTitle(R.string.modify_device);
//            mEditDeviceId.setText(mDevice.mSN);
//            findViewById(R.id.ly_device_id).setVisibility(View.GONE);
//            findViewById(R.id.txt_del_device).setVisibility(View.VISIBLE);
        }
        else{
            String strTitle = getString(R.string.action_add);
            strTitle += mTxtType.getText();
            setTitle(strTitle);
        }
    }
    private void showPorts(){

        Vector<Long> dataIds = mDevice.getDataIds();
        int i = 0;
        for (i = 0; i < dataIds.size() && i < KMaxPortCount; ++i){
            DeviceInfo.DevicePortInfo p = mDevice.mPorts.get(dataIds.get(i));
            if (mDataId > 0 && p.mPortId != mDataId){
                mLyRooms[i].setVisibility(View.GONE);
                mLyNames[i].setVisibility(View.GONE);
            }
            else{
                mLyRooms[i].setVisibility(View.VISIBLE);
                mLyNames[i].setVisibility(View.VISIBLE);
                if (mDataId > 0) mEditNames[i].requestFocus();
            }

            mEditNames[i].setText(p.mName);
            if (mDataId > 0) mEditNames[i].requestFocus();
            long lRoomId = mDevice.mPorts.get(dataIds.get(i)).mRoomId;
            RoomInfo r = AppCache.mRooms.get(lRoomId);
            mTxtRooms[i].setText(r == null ? "" : r.mName);
        }
        if (mDataId <= 0) mEditNames[0].requestFocus();

        for(; i < KMaxPortCount; ++i){
            mLyRooms[i].setVisibility(View.GONE);
            mLyNames[i].setVisibility(View.GONE);
        }
    }

    private void OnSelGateway(){

        final Long[] sGatewayIds = new Long[AppCache.mGatewayIds.size()];
        final String[] sGateways = new String[sGatewayIds.length];

        for (int i = 0; i < sGatewayIds.length; ++i){
            sGatewayIds[i] = AppCache.mGatewayIds.get(i);
            sGateways[i] = AppCache.mDevices.get(sGatewayIds[i]).mName;
        }

        new AlertDialog.Builder(this)
                .setTitle(R.string.select_gateway)
                .setItems(sGateways, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        mDevice.mSuperDevId = sGatewayIds[i];
                        mTxtGateway.setText(sGateways[i]);
                    }
                })
        .show();
    }

    private void OnSelFamily(){

        final Long[]sFamilyIds = new Long[AppCache.mFamilyIds.size() + 1];
        final String[]sFamilyNames = new String[sFamilyIds.length];

        for (int i = 0; i < AppCache.mFamilyIds.size(); ++i){
            sFamilyIds[i] = AppCache.mFamilyIds.get(i);
            sFamilyNames[i] = AppCache.mFamilies.get(sFamilyIds[i]).mName;
        }
        sFamilyIds[AppCache.mFamilyIds.size()] = -1L;
        sFamilyNames[AppCache.mFamilyIds.size()] = getString(R.string.action_customer_def);

        new AlertDialog.Builder(this)
                .setTitle(R.string.select_family)
                .setItems(sFamilyNames, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        if (i >= AppCache.mFamilyIds.size()) {
                            Intent intent = new Intent();
                            intent.setClass(ActivityDeviceDetail.this, ActivityFamilyList.class);
                            intent.putExtra("is_for_select", true);
                            startActivityForResult(intent, KActivityResultCreateFamily);
                            return;
                        }
                        mDevice.mFamilyId = sFamilyIds[i];
                        mTxtFamily.setText(sFamilyNames[i]);
                    }
                })
                .show();
    }

    private void OnSelRooms(int index){

        final int sIdxSelRoomLy = index;
        final Long[] sRoomIds = new Long[AppCache.mRoomIds.size() + 1];
        final String[] sRoomNames = new String[sRoomIds.length];

        for (int i = 0; i < AppCache.mRoomIds.size(); ++i){
            sRoomIds[i] = AppCache.mRoomIds.get(i);
            sRoomNames[i] = AppCache.mRooms.get(sRoomIds[i]).mName;
        }
        sRoomIds[AppCache.mRoomIds.size()] = -1L;
        sRoomNames[AppCache.mRoomIds.size()] = getString(R.string.action_customer_def);

        new AlertDialog.Builder(this)
                .setTitle(R.string.select_room)
                .setItems(sRoomNames, new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        if (sIdxSelRoomLy >= mDevice.mPorts.size()) return;

                        if (i >= AppCache.mRoomIds.size()) {
                            Intent intent = new Intent();
                            intent.setClass(ActivityDeviceDetail.this, ActivityRoomList.class);
                            intent.putExtra("is_for_select", true);
                            startActivityForResult(intent, KActivityResultCreateRoom1 + sIdxSelRoomLy);
                            return;
                        }
                        Vector<Long> dataIds = mDevice.getDataIds();
                        mDevice.mPorts.get(dataIds.get(sIdxSelRoomLy)).mRoomId = sRoomIds[i];
                        mTxtRooms[sIdxSelRoomLy].setText(sRoomNames[i]);
                    }
                })
                .show();
    }

    private RequestHandle sReqDeleteDevice = null;
    public void DeleteDevice(){

        AppResponseHandler onDeleteOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqDeleteDevice = null;

                if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeGateway){
                    AppCache.mGatewayIds.remove(Long.valueOf(mDevice.mId));
                }
                AppCache.mDevices.remove(mDevice.mId);

                Intent intent = new Intent();
                intent.setAction(Config.BoardcastZzdDevicesUpdate);
                sendBroadcast(intent);

                mProgDialog.hide();
                final AlertDialog dialog = new AlertDialog.Builder(ActivityDeviceDetail.this)
//                            .setTitle("提示")
                        .setMessage(getString(R.string.del_finished))
                        .show();

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        dialog.dismiss();
                        ActivityDeviceDetail.this.finish();
                    }
                }, Toast.LENGTH_LONG);
            }

            ;

            public void onReqFailure(String msg) {
                sReqDeleteDevice = null;
                mProgDialog.hide();
                Toast.makeText(ActivityDeviceDetail.this, msg, Toast.LENGTH_LONG).show();
            }

            ;
        };
        mProgDialog.setMessage(getString(R.string.tip_deleteing));
        mProgDialog.show();
        sReqDeleteDevice = ServerClient.DeleteDevice(mDevice.mId, onDeleteOK);
    }
    private void DeleteWithConfirm(){
        String strTitle = getString(R.string.del_device);
        if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeGateway){
            strTitle = getString(R.string.del_gateway);
            Vector<Long> childs = AppCache.GetDeviceIdByGatewayId(mDevice.mId);
            if (childs.size() > 0) {
                String strMsg = getString(R.string.tip_del_gateway1);
                strMsg += childs.size();
                strMsg += getString(R.string.tip_del_gateway2);
                new AlertDialog.Builder(this)
                        .setTitle(strTitle)
                        .setMessage(strMsg)
                        .setPositiveButton(getString(R.string.action_delete), new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                DeleteDevice();
                            }
                        })
                        .setNegativeButton(getString(R.string.action_cancel), null)
                        .show();
                return;
            }
        }
        new AlertDialog.Builder(this)
                .setTitle(strTitle)
                .setMessage(R.string.tip_del_cannot_undo)
                .setPositiveButton(getString(R.string.action_delete), new DialogInterface.OnClickListener() {
                    public void onClick(DialogInterface dialog, int which) {
                        DeleteDevice();
                    }
                })
                .setNegativeButton(getString(R.string.action_cancel), null)
                .show();
    }

    private RequestHandle sReqSaveDevice = null;

    public void SaveDevice(){
        if (mDevice.mId <= 0) return;

        if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeGateway){
            mDevice.mName = mEditNames[0].getText().toString();
            if (Common.isNullString(mDevice.mName)){
                mEditNames[0].requestFocus();
                Toast.makeText(this, R.string.tip_need_input_name, Toast.LENGTH_LONG).show();
                return;
            }
        }
        else{
            if(mDevice.mFamilyId <= 0){
                mDevice.mFamilyId = AppCache.mCurFamilyId;
            }

            Vector<Long> dataIds = mDevice.getDataIds();
            for (int i = 0; i < dataIds.size() && i < KMaxPortCount; ++i){
                String strName = mEditNames[i].getText().toString();
                if (Common.isNullString(strName)){
                    mEditNames[i].requestFocus();
                    Toast.makeText(this, R.string.tip_need_input_name, Toast.LENGTH_LONG).show();
                    return;
                }
                mDevice.mPorts.get(dataIds.get(i)).mName = strName;
            }
        }
        AppResponseHandler onSaveOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqSaveDevice = null;
                try {
                    JSONObject jo = arg0.getJSONArray("dataList").getJSONObject(0);
                    DeviceInfo d = new DeviceInfo();
                    d.copyFrom(mDevice);    // get old status from old device info
                    d.fromJson(jo, false);
                    AppCache.mDevices.put(d.mId, d);
                    if (d.mDeviceType == Config.DeviceType.KDeviceTypeGateway){
                        AppCache.mGatewayIds.add(d.mId);
                    }

                    Intent intent = new Intent();
                    intent.setAction(Config.BoardcastZzdDevicesUpdate);
                    sendBroadcast(intent);

                    mProgDialog.hide();
                    final AlertDialog dialog = new AlertDialog.Builder(ActivityDeviceDetail.this)
//                            .setTitle("提示")
                            .setMessage(getString(R.string.save_finished))
                            .show();

                    new Handler().postDelayed(new Runnable() {
                        @Override
                        public void run() {
                            dialog.dismiss();
                            ActivityDeviceDetail.this.finish();
                        }
                    }, Toast.LENGTH_LONG);

                } catch (org.json.JSONException e) {
                    e.printStackTrace();
                    return;
                }
            }

            ;

            public void onReqFailure(String msg) {
                sReqSaveDevice = null;
                mProgDialog.hide();
                Toast.makeText(ActivityDeviceDetail.this, msg, Toast.LENGTH_LONG).show();
            }

            ;
        };
        mProgDialog.setMessage(getString(R.string.tip_saving));
        mProgDialog.show();
        sReqSaveDevice = ServerClient.UpdateDevice(mDevice, onSaveOK);
    }

    public boolean HasEdit(){
        DeviceInfo dev = AppCache.mDevices.get(mDevice.mId);
        if (dev == null) return false;

        if (mDevice.mDeviceType == Config.DeviceType.KDeviceTypeGateway){
            String strName = mEditNames[0].getText().toString();
            if (dev.mName.equals(strName)){
                return true;
            }
        }
        if (mDevice.mFamilyId != dev.mFamilyId) return false;
        if (mDevice.mSuperDevId != dev.mSuperDevId) return false;
        if (mDevice.mPorts.size() != dev.mPorts.size()) return false;

        Vector<Long> dataIds = mDevice.getDataIds();
        for (int i = 0; i < dataIds.size() && i < KMaxPortCount; ++i){
            DeviceInfo.DevicePortInfo p = dev.mPorts.get(dataIds.get(i));
            if (p == null) return true;

            String strName = mEditNames[i].getText().toString();
            if (!p.mName.equals(strName)) {
                return true;
            }
            if (p.mRoomId != mDevice.mPorts.get(dataIds.get(i)).mRoomId) return true;
        }

        return false;
    }

    public void OnHeaderLeftClick(){
        if (HasEdit()){
            new AlertDialog.Builder(this)
                    .setMessage(R.string.tip_quit_without_save)
                    .setPositiveButton(getString(R.string.action_quit), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    })
                    .setNegativeButton(getString(R.string.action_cancel), null)
                    .show();
            return;
        }
        finish();
    }
}
