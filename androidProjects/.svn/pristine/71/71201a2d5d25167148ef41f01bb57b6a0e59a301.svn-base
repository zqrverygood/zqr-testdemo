package app.smarthome.zzd.smarthome;

import android.content.Context;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.text.Selection;
import android.text.Spannable;
import android.text.method.HideReturnsTransformationMethod;
import android.text.method.PasswordTransformationMethod;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.RequestHandle;
import com.util.db.AppDb;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;

import app.smarthome.zzd.smarthome.model.FamilyInfo;
import app.smarthome.zzd.smarthome.model.UserInfo;

/**
 * Created by Administrator on 2015/12/10.
 */
public class ActivityLogin extends ActivityHeaderBase {
    public static final int         KModeLogin = 0;
    public static final int         KModeReg = 1;
    public static final int         KModeForgetPasswd = 2;
    int      mCurrentMode =         KModeReg;
    private SharedPreferences mSharedPreferences;

    private Animation               mRotateAction;
    private Animation               mWarningAction;

    private TextView                mRegisterNewAccount;
    private TextView                mResetPassword;
    private TextView                mTxtServiceTern;
    private TextView                mTxtResetImmediatelyLogin;
    private TextView                mTxtRegisterImmediatelyLogin;

    private RelativeLayout          mRememberPassword;
    private LinearLayout            mLlAppagreenent;
    private  ViewPager              mViewPager;
    private ViewPagerAdapter        mAdapter;
    private ArrayList<View>         mViewList;
    private int                     mPreviousPosition = 0;//图片的索引
    private int                     time;  //倒计时的时间
    private boolean                 mRememberpwdState ;//记住密码的状态
    private boolean                 mLoginPutPasswordVisibilityState = true;//登录页面记住密码是否显示
    private boolean                 mRegisterPutPasswordVisibilityState = true;//注册页面密码是否显示
    private boolean                 mRegisterConfirmPasswordVisibilityState =true;//注册页确认密码是否显示
    private boolean                 mResetPutPasswordVisibilityState = true;//重置密码页面密码是否显示
    private boolean                 mResetConfirmPasswordVisibilityState =true;//注重置密码页确认密码是否显示

    private Button                  mButtonSentVcode;//发送验证码
    private Button                  mButtonResetSentVcode;//重置密码页的发送验证码
    private Button                  mButtonRegister;//注册
    private Button                  mButtonLogin;//登录
    private Button                  mButtonResetpassword;//重置密码

    private EditText                mEditAccount;
    private EditText                mEditVCode;
    private EditText                mEditPassword;
    private EditText                mEditPasswordConfirm;
    private EditText                mEditPhone;
    private EditText                mEditLoginAccount;//登录页的账号
    private EditText                mEditLoginPassword;//登录页的密码
    private EditText                mEditResetVCode;   //重置密码页的验证码
    private EditText                mEditResetPassword;
    private EditText                mEditResetPasswordConfirm;
    private EditText                mEditResetPhone;
    private EditText                mEditResetAccount;


    private ImageView               mImgRememberPassword;
    private ImageView               mImgLoginPutPassword;
    private ImageView               mImgRegusterPutPassword;
    private ImageView               mImgRegisterConfirmpassword;
    private ImageView               mImgResetPutPassword;
    private ImageView               mImgResetConfirmpassword;

    private RequestHandle           sReqVCodeId = null;
    private Handler handler = new Handler() {

        public void handleMessage(android.os.Message msg) {
            time -= 1;
            if (time <= 0) {
                mButtonSentVcode.setClickable(true);
                mButtonSentVcode.setText(R.string.sent_cvode);
                mButtonSentVcode.setBackgroundResource(R.drawable.send_code);
            } else {
                String s = String.valueOf(time);
                mButtonSentVcode.setText(s + getResources().getText(R.string.reset_cvode));
                mButtonSentVcode.setBackgroundResource(R.drawable.send_code_off);
                mButtonSentVcode.setTextSize(13);
                handler.sendEmptyMessageDelayed(0, 1000);
            }
        }

        ;
    };
    private Handler handlerResetpwd = new Handler() {

        public void handleMessage(android.os.Message msg) {
            time -= 1;
            if (time <= 0) {
                mButtonResetSentVcode.setClickable(true);
                mButtonResetSentVcode.setText(R.string.sent_cvode);
                mButtonResetSentVcode.setBackgroundResource(R.drawable.send_code);
            } else {
                String s = String.valueOf(time);
                mButtonResetSentVcode.setText(s + getResources().getText(R.string.reset_cvode) );
                mButtonResetSentVcode.setBackgroundResource(R.drawable.send_code_off);
                mButtonResetSentVcode.setTextSize(13);
                handlerResetpwd.sendEmptyMessageDelayed(0, 1000);
            }
        }

        ;
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        mSharedPreferences = getSharedPreferences("userInfo", MODE_PRIVATE);
        super.onCreate(savedInstanceState);
        setContentView(R.layout.login_viewpager);
        mTxtHeaderTitle.setText(R.string.login_header_title);
        mBtnHeaderLeft.setVisibility(View.GONE);
        mBtnHeaderRight.setVisibility(View.GONE);
        mRememberpwdState =   mSharedPreferences.getBoolean("isrememberpasswoed", true);
        mViewPager = (ViewPager) findViewById(R.id.login_viewpager);

        mViewList = new ArrayList<View>();
        final View login = getLayoutInflater().inflate(R.layout.activity_login, null);
        mViewList.add(login);
        View register = getLayoutInflater().inflate(R.layout.activity_register, null);
        mViewList.add(register);
        View resetPassword = getLayoutInflater().inflate(R.layout.activity_register, null);
        mViewList.add(resetPassword);

        mAdapter = new ViewPagerAdapter();
        mViewPager.setAdapter(mAdapter);
        mViewPager.setCurrentItem(mPreviousPosition);

        mRegisterNewAccount = (TextView) login.findViewById(R.id.register_new_account);
        mButtonLogin = (Button) login.findViewById(R.id.login_btn_login);
        mEditLoginAccount = (EditText) login.findViewById(R.id.login_edit_account);
        mEditLoginPassword = (EditText) login.findViewById(R.id.login_edit_password);
        mResetPassword = (TextView) login.findViewById(R.id.txt_resetpassword);
        mRememberPassword = (RelativeLayout) login.findViewById(R.id.rl_rememberpassword);
        mImgRememberPassword = (ImageView) login.findViewById(R.id.img_rememberpwd_logo);
        mImgLoginPutPassword = (ImageView) login.findViewById(R.id.img_login_put_pwd_visibility);

        mButtonSentVcode = (Button) register.findViewById(R.id.sent_vcode);
        mButtonRegister = (Button) register.findViewById(R.id.btn_submit);
        mEditAccount = (EditText) register.findViewById(R.id.edit_account);
        mEditPassword = (EditText) register.findViewById(R.id.edit_password);
        mEditPasswordConfirm = (EditText) register.findViewById(R.id.edit_password_confirm);
        mEditVCode = (EditText) register.findViewById(R.id.edit_vcode);
        mEditPhone = (EditText) register.findViewById(R.id.edit_phonenumber);
        mTxtServiceTern = (TextView) register.findViewById(R.id.txt_service_term);
        mImgRegusterPutPassword = (ImageView) register.findViewById(R.id.img_register_put_pwd);
        mImgRegisterConfirmpassword = (ImageView) register.findViewById(R.id.img_register_config_pwd);
        mTxtRegisterImmediatelyLogin = (TextView) register.findViewById(R.id.immediately_login);

        mLlAppagreenent = (LinearLayout) resetPassword.findViewById(R.id.ly_app_agreement_term);
        mLlAppagreenent.setVisibility(View.INVISIBLE);
        mButtonResetpassword = (Button) resetPassword.findViewById(R.id.btn_submit);
        mButtonResetpassword.setText(R.string.resetpassword_button);
        mButtonResetSentVcode = (Button) resetPassword.findViewById(R.id.sent_vcode);
        mEditResetAccount = (EditText) resetPassword.findViewById(R.id.edit_account);
        mEditResetPassword = (EditText) resetPassword.findViewById(R.id.edit_password);
        mEditResetPasswordConfirm = (EditText) resetPassword.findViewById(R.id.edit_password_confirm);
        mEditResetVCode = (EditText) resetPassword.findViewById(R.id.edit_vcode);
        mEditResetPhone = (EditText) resetPassword.findViewById(R.id.edit_phonenumber);
        mImgResetPutPassword = (ImageView) resetPassword.findViewById(R.id.img_register_put_pwd);
        mImgResetConfirmpassword = (ImageView) resetPassword.findViewById(R.id.img_register_config_pwd);
        mTxtResetImmediatelyLogin = (TextView) resetPassword.findViewById(R.id.immediately_login);

        if (mRememberpwdState) {
            mImgRememberPassword.setBackgroundResource(R.drawable.check_box_on_yellow);
        } else {
            mImgRememberPassword.setBackgroundResource(R.drawable.check_box_off);
        }

        //点击进入注册页
        mRegisterNewAccount.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 1, true);
                mTxtHeaderTitle.setText(R.string.register_header_title);
                mBtnHeaderLeft.setVisibility(View.VISIBLE);
            }
        });

        //记住密码
        mRememberPassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if (mRememberpwdState) {
                    mImgRememberPassword.setBackgroundResource(R.drawable.check_box_off);
                    mSharedPreferences.edit().putString("password","" ).commit();
                } else {
                    mImgRememberPassword.setBackgroundResource(R.drawable.check_box_on_yellow);
                }
                mRememberpwdState = !mRememberpwdState;
                mSharedPreferences.edit().putBoolean("isrememberpasswoed", mRememberpwdState).commit();

            }
        });
        //点击立即登录跳到登录页
        mTxtRegisterImmediatelyLogin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mViewPager.setCurrentItem(0, true);
                mTxtHeaderTitle.setText(R.string.login_header_title);
                mBtnHeaderLeft.setVisibility(View.GONE);
            }
        });
        mTxtResetImmediatelyLogin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mViewPager.setCurrentItem(0, true);
                mTxtHeaderTitle.setText(R.string.login_header_title);
                mBtnHeaderLeft.setVisibility(View.GONE);
            }
        });


        //登录页点击密码设为可见与不可见
        mImgLoginPutPassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SetPasswordListener(mEditLoginPassword, mImgLoginPutPassword, mLoginPutPasswordVisibilityState);
                mLoginPutPasswordVisibilityState = !mLoginPutPasswordVisibilityState;
            }
        });

        //注册页的密码可见与不可见
        mImgRegusterPutPassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SetPasswordListener(mEditPassword, mImgRegusterPutPassword, mRegisterPutPasswordVisibilityState);
                mRegisterPutPasswordVisibilityState = !mRegisterPutPasswordVisibilityState;
            }
        });

        //注册页确认密码可见与不可见
        mImgRegisterConfirmpassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SetPasswordListener(mEditPasswordConfirm, mImgRegisterConfirmpassword, mRegisterConfirmPasswordVisibilityState);
                mRegisterConfirmPasswordVisibilityState = !mRegisterConfirmPasswordVisibilityState;
            }
        });

        //重置输入密码页的密码可见不可见
        mImgResetPutPassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SetPasswordListener(mEditResetPassword, mImgResetPutPassword, mResetPutPasswordVisibilityState);
                mResetPutPasswordVisibilityState = !mResetPutPasswordVisibilityState;
            }
        });

        //重置密码页的确认密码可见与不可见
        mImgResetConfirmpassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                SetPasswordListener(mEditResetPasswordConfirm, mImgResetConfirmpassword, mResetConfirmPasswordVisibilityState);
                mResetConfirmPasswordVisibilityState = !mResetConfirmPasswordVisibilityState;
            }
        });

        //点击进入重置密码
        mResetPassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mViewPager.setCurrentItem(mViewPager.getCurrentItem() + 2, true);
                mTxtHeaderTitle.setText(R.string.reset_password_header_title);
                mBtnHeaderLeft.setVisibility(View.VISIBLE);
                mEditResetAccount.setText(mSharedPreferences.getString("loginName", ""));

            }
        });

        //注册页返回登录页
        mBtnHeaderLeft.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                mViewPager.setCurrentItem(0, true);
                mTxtHeaderTitle.setText(R.string.login_header_title);
                mBtnHeaderLeft.setVisibility(View.GONE);
            }
        });

        //注册页发送验证码
        mButtonSentVcode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String phone = mEditPhone.getText().toString();
                if (phone.length() < 5) {
                    Toast.makeText(ActivityLogin.this, R.string.prompt_cvode_phone_number, Toast.LENGTH_LONG).show();
                }
                sReqVCodeId = ServerClient.ApplyVCode(phone, true, new AppResponseHandler() {
                    public void onReqSuccess(JSONObject arg0) {

                        try {
                            Long jo = arg0.getLong("availTime");
                            String succes = arg0.getString("success");
                            System.out.println(jo);
                            mButtonSentVcode.setClickable(false);
                            time = 5;
                            handler.sendEmptyMessageDelayed(0, 1000);
                        } catch (org.json.JSONException e) {
                            e.printStackTrace();
                            mEditVCode.setEnabled(true);
                            return;
                        }
                    }
                    public void onReqFailure(String msg) {

                        Toast.makeText(ActivityLogin.this, msg, Toast.LENGTH_LONG).show();
                    }
                });
            }
        });


        //服务条款的显示
        mTxtServiceTern.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Intent intent = new Intent();
                intent.setClass(ActivityLogin.this, ActivityWebView.class);
                intent.putExtra("url", "file:///android_asset/AppCovenants.html");
                intent.putExtra("caption", getString(R.string.service_term));
                startActivityForResult(intent, 0);
            }
        });

        //提交注册
        mButtonRegister.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String loginname = mEditAccount.getText().toString();
                String phone = mEditPhone.getText().toString();
                String vcode = mEditVCode.getText().toString();
                String passwd = mEditPassword.getText().toString();
                String passwdConfirm = mEditPasswordConfirm.getText().toString();
                if (!passwdConfirm.equals(passwd)) {
                    Toast.makeText(ActivityLogin.this, R.string.prompt_pwd_different, Toast.LENGTH_LONG).show();
                    return;
                }

                RequestHandle rqh = ServerClient.Signup(loginname, phone, passwd, vcode, new AppResponseHandler() {
                    public void onReqSuccess(JSONObject arg0) {
                        try {

                            String message = arg0.getString("message");
                            Toast.makeText(ActivityLogin.this, message, Toast.LENGTH_LONG).show();
//                            Intent i = new Intent(ActivityLogin.this, ActivityMain.class);
//                            startActivity(i);
//                            finish();

                            mViewPager.setCurrentItem(0, true);
                            mTxtHeaderTitle.setText(R.string.login_header_title);
                            mBtnHeaderLeft.setVisibility(View.GONE);

                        } catch (Exception e) {
                            Toast.makeText(ActivityLogin.this, e.toString(), Toast.LENGTH_LONG).show();
                            return;
                        }
                    }
                    public void onReqFailure(String msg) {
                        System.out.println("bbbbbbbbbbbbbbbbbbbbbbbbbb");
                        Toast.makeText(ActivityLogin.this, msg, Toast.LENGTH_LONG).show();
                    }
                });
            }
        });

        //重置密码页的发送验证码
        mButtonResetSentVcode.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String phone = mEditResetPhone.getText().toString();
                if (phone.length() < 5) {
                    Toast.makeText(ActivityLogin.this, R.string.prompt_cvode_phone_number, Toast.LENGTH_LONG).show();
                }
                sReqVCodeId = ServerClient.ApplyVCode(phone, true, new AppResponseHandler() {
                    public void onReqSuccess(JSONObject arg0) {

                        try {
                            Long jo = arg0.getLong("availTime");
                            String succes = arg0.getString("success");
                            System.out.println(jo);
                            mButtonResetSentVcode.setClickable(false);
                            time = 5;
                            handlerResetpwd.sendEmptyMessageDelayed(0, 500);
                        } catch (org.json.JSONException e) {
                            e.printStackTrace();
                            mEditResetVCode.setEnabled(true);
                            return;
                        }
                    }
                    public void onReqFailure(String msg) {
                        Toast.makeText(ActivityLogin.this, msg, Toast.LENGTH_LONG).show();
                    }
                });
            }
        });

        //重置密码按钮
        mButtonResetpassword.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String loginname = mEditResetAccount.getText().toString();
                String phone = mEditResetPhone.getText().toString();
                String vcode = mEditResetVCode.getText().toString();
                String passwd = mEditResetPassword.getText().toString();
                String passwdConfirm = mEditResetPasswordConfirm.getText().toString();
                if (!passwdConfirm.equals(passwd)) {
                    Toast.makeText(ActivityLogin.this, R.string.prompt_pwd_different, Toast.LENGTH_LONG).show();
                    return;
                }
                RequestHandle rqh = ServerClient.ResetPassword(loginname, phone, passwd, vcode, new AppResponseHandler() {
                    public void onReqSuccess(JSONObject arg0) {
                        try {
                            String message = arg0.getString("message");
                            Toast.makeText(ActivityLogin.this, message, Toast.LENGTH_LONG).show();
//                            Intent i = new Intent(ActivityLogin.this, ActivityMain.class);
//                            startActivity(i);
//                            finish();

                            mViewPager.setCurrentItem(0, true);
                            mTxtHeaderTitle.setText(R.string.login_header_title);
                            mBtnHeaderLeft.setVisibility(View.GONE);

                        } catch (Exception e) {
                            Toast.makeText(ActivityLogin.this, e.toString(), Toast.LENGTH_LONG).show();
                            return;
                        }
                    }
                    public void onReqFailure(String msg) {
                        System.out.println("bbbbbbbbbbbbbbbbbbbbbbbbbb");
                        Toast.makeText(ActivityLogin.this, msg, Toast.LENGTH_LONG).show();
                    }
                });
            }
        });

        //登录
        mButtonLogin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                final String loginName = mEditLoginAccount.getText().toString();
                String password = mEditLoginPassword.getText().toString();
                RequestHandle rqh = ServerClient2.login(loginName, password, new AppResponseHandler() {
                            public void onReqSuccess(JSONObject arg0) {
                                try {
                                    rememberPassword();
                                    UserInfo user = new UserInfo();
                                    JSONArray ja = arg0.getJSONArray("dataList");
                                    user.fromJson(ja.getJSONObject(0));
                                    AppCache.OnLogined(user);

                                    JSONArray jFms = arg0.getJSONObject("attributes").getJSONArray("family");
                                    JSONObject recv = new JSONObject();
                                    recv.put("dataList", jFms);
                                    recv.put("success", true);
                                    AppDb.getInstance(null).setConfig(AppCache.KDbKeyFamilies, recv.toString());
                                    AppCache.OnRecvFamilies(recv);
//                                    if(AppCache.mFamilyIds.size() > 0){
//                                        AppCache.LoginToFamily(AppCache.mFamilyIds.get(0));
//                                    }

                                    Toast.makeText(ActivityLogin.this, R.string.login_finished, Toast.LENGTH_LONG).show();
                                    Intent i = new Intent(ActivityLogin.this, ActivityMain.class);
                                    startActivity(i);
                                    finish();
                                } catch (Exception e) {
                                    Toast.makeText(ActivityLogin.this, e.toString(), Toast.LENGTH_LONG).show();
                                    return;
                                }
                            }
                            public void onReqFailure(String msg) {
                                Toast.makeText(ActivityLogin.this, msg, Toast.LENGTH_LONG).show();
                            }
                        }
                );
            }
        });
        //记住密码的状态，看初始化是否显示密码
        mEditLoginAccount.setText(mSharedPreferences.getString("loginName", ""));
        mEditLoginAccount.setSelection(mEditLoginAccount.getText().length());
        if(mSharedPreferences.getBoolean("isrememberpasswoed", true)){
            mEditLoginPassword.setText(mSharedPreferences.getString("password", ""));
            mEditLoginPassword.setSelection(mEditLoginPassword.getText().length());
        }
    }

    //记住密码与账号
    private void rememberPassword (){
        String loginName = mEditLoginAccount.getText().toString();
        String password = mEditLoginPassword.getText().toString();
        SharedPreferences.Editor edit = mSharedPreferences.edit();
        edit.putString("loginName", loginName);
        edit.putString("password", password);
        edit.commit();
    }

    @Override
    protected void onResume() {

        super.onResume();
    }



    public void SetPasswordListener(EditText editText, ImageView imageView, boolean bo) {

        if (bo) {
            imageView.setBackgroundResource(R.drawable.login_eye_up);
            editText.setTransformationMethod(HideReturnsTransformationMethod.getInstance());
        } else {
            imageView.setBackgroundResource(R.drawable.login_eye_down);
            editText.setTransformationMethod(PasswordTransformationMethod.getInstance());
        }
        //切换后将EditText光标置于末尾
        CharSequence charSequence = editText.getText();
        if (charSequence instanceof Spannable) {
            Spannable spanText = (Spannable) charSequence;
            Selection.setSelection(spanText, charSequence.length());
        }
    }

    //适配器
    protected class ViewPagerAdapter extends PagerAdapter {

        @Override
        public int getCount() {
            return mViewList.size();
        }
        @Override
        public boolean isViewFromObject(View arg0, Object arg1) {
            return arg0 == arg1;
        }
        @Override
        public void destroyItem(ViewGroup container, int position, Object object) {
            container.removeView(mViewList.get(position));
        }
        @Override
        public Object instantiateItem(ViewGroup container, int position) {
            container.addView(mViewList.get(position));
            return mViewList.get(position);
        }
    }
}
