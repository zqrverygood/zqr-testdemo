package app.smarthome.zzd.smarthome.model;

import android.os.Parcel;
import android.os.Parcelable;
import android.support.annotation.NonNull;

import com.loopj.android.http.RequestParams;
import com.util.Common;

import org.json.JSONArray;
import org.json.JSONObject;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.Vector;

import app.smarthome.zzd.smarthome.Config;

/**
 * Created by zzdios on 15/11/16.
 */
public class DeviceInfo implements Parcelable {

    public static class DevicePortInfo {
        static final public int KDateCnt = 6;

        public String mName;
        public long mRoomId;
        public long mPortId;
        public long mLinkId;
        public long mStatus;
        public float mKwh;

        public DevicePortInfo() {

        }

        public DevicePortInfo(DevicePortInfo p) {
            mName = "" + p.mName;
            mRoomId = p.mRoomId;
            mPortId = p.mPortId;
            mLinkId = p.mLinkId;
            mStatus = p.mStatus;
            mKwh = p.mKwh;
        }
    }

    public long mId;
    public long mFamilyId;
//    public long mRoomId;
    public long mSuperDevId;
    public long mDeviceType;
    public long mUseDate;
    public long mUse;
    public String mSN;
    public String mName;
    public String mRemark;
    public String mQRCode;
    public Map<Long, DevicePortInfo> mPorts = new HashMap<>();

    public Vector<Long> getDataIds() {
        Vector<Long> dataIds = new Vector<>();
        dataIds.addAll(mPorts.keySet());
        return dataIds;
    }

    public void copyFrom(DeviceInfo d) {
        mId = d.mId;
        mFamilyId = d.mFamilyId;
//        mRoomId = d.mRoomId;
        mSuperDevId = d.mSuperDevId;
        mDeviceType = d.mDeviceType;
        mUseDate = d.mUseDate;
        mUse = d.mUse;
        mSN = "" + d.mSN;
        mName = "" + d.mName;
        mRemark = "" + d.mRemark;
        mQRCode = "" + d.mQRCode;

        mPorts.clear();
        Set<Long> keys = d.mPorts.keySet();
        for (Long k : keys) {
            DevicePortInfo port = new DevicePortInfo(d.mPorts.get(k));
            mPorts.put(port.mPortId, port);
        }
    }

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(mId);
        dest.writeLong(mFamilyId);
//        dest.writeLong(mRoomId);
        dest.writeLong(mSuperDevId);
        dest.writeLong(mDeviceType);
        dest.writeLong(mUseDate);
        dest.writeLong(mUse);
        dest.writeString(mSN);
        dest.writeString(mName);
        dest.writeString(mRemark);
        dest.writeString(mQRCode);

        Object[] keys = mPorts.keySet().toArray();
        String[] tmp = new String[keys.length * DevicePortInfo.KDateCnt];
        for (int i = 0; i < keys.length; i++) {
            tmp[i * DevicePortInfo.KDateCnt] = "" + mPorts.get(keys[i]).mPortId;
            tmp[i * DevicePortInfo.KDateCnt + 1] = "" + mPorts.get(keys[i]).mRoomId;
            tmp[i * DevicePortInfo.KDateCnt + 2] = mPorts.get(keys[i]).mName;
            tmp[i * DevicePortInfo.KDateCnt + 3] = "" + mPorts.get(keys[i]).mStatus;
            tmp[i * DevicePortInfo.KDateCnt + 4] = "" + mPorts.get(keys[i]).mLinkId;
            tmp[i * DevicePortInfo.KDateCnt + 5] = "" + mPorts.get(keys[i]).mKwh;
        }
        dest.writeStringArray(tmp);
    }

    public static final Parcelable.Creator<DeviceInfo> CREATOR = new Parcelable.Creator<DeviceInfo>() {
        public DeviceInfo createFromParcel(Parcel in) {
            DeviceInfo di = new DeviceInfo();
            di.mId = in.readLong();
            di.mFamilyId = in.readLong();
//            di.mRoomId = in.readLong();
            di.mSuperDevId = in.readLong();
            di.mDeviceType = in.readLong();
            di.mUseDate = in.readLong();
            di.mUse = in.readLong();
            di.mSN = in.readString();
            di.mName = in.readString();
            di.mRemark = in.readString();
            di.mQRCode = in.readString();

            String[] tmp = in.createStringArray();
            int portCount = tmp.length / DevicePortInfo.KDateCnt;
            for (int i = 0; i < portCount; i++) {
                DevicePortInfo port = new DevicePortInfo();
                port.mPortId = Long.valueOf(tmp[i * DevicePortInfo.KDateCnt]);
                port.mRoomId = Long.valueOf(tmp[i * DevicePortInfo.KDateCnt]+1);
                port.mName = tmp[i * DevicePortInfo.KDateCnt + 2];
                port.mStatus = Long.valueOf(tmp[i * DevicePortInfo.KDateCnt + 3]);
                port.mLinkId = Long.valueOf(tmp[i * DevicePortInfo.KDateCnt + 4]);
                port.mKwh = Float.valueOf(tmp[i * DevicePortInfo.KDateCnt + 5]);
                di.mPorts.put(port.mPortId, port);
            }
            return di;
        }

        public DeviceInfo[] newArray(int size) {
            return new DeviceInfo[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }


    public void toParam(RequestParams req) {

        req.put("id", mId);
        req.put("familyId", mFamilyId);
        req.put("name", mName);

        if (mDeviceType != Config.DeviceType.KDeviceTypeGateway){
            req.put("superDevId", mSuperDevId);
        }
        Vector<RequestParams> ja = new Vector<>();
        Vector<Long> dataIds = getDataIds();
        for (Long dataId : dataIds) {
            DevicePortInfo p = mPorts.get(dataId);
            RequestParams ro = new RequestParams();
            ro.put("dataId", p.mPortId);
            ro.put("roomId", p.mRoomId);
            ro.put("name", p.mName);
            ja.add(ro);
        }

        req.put("ykList", ja);
    }

    public void toParam(JSONObject params) {
        try {
            if(mId > 0) params.put("id", mId);
            params.put("familyId", mFamilyId);
            params.put("superDevId", mSuperDevId);
            params.put("name", mName);

            JSONArray ja = new JSONArray();
            Vector<Long> dataIds = getDataIds();
            for (Long dataId : dataIds) {
                DevicePortInfo p = mPorts.get(dataId);
                JSONObject jo = new JSONObject();
                jo.put("dataId", p.mPortId);
                jo.put("roomId", p.mRoomId);
                jo.put("name", p.mName);
                ja.put(jo);
            }

            params.put("ykList", ja);
        } catch (org.json.JSONException e) {
            e.printStackTrace();
            return;
        }
    }

    public void fromJson(JSONObject jsonObject, boolean hasStatus) {
        try {
            mId = Common.getLongFromJson(jsonObject, "id");
            mFamilyId = Common.getLongFromJson(jsonObject, "familyId");
//            mRoomId = Common.getLongFromJson(jsonObject, "roomId");
            mSuperDevId = Common.getLongFromJson(jsonObject, "superDevId");
            mDeviceType = Common.getLongFromJson(jsonObject, "deviceType");
            mUseDate = Common.getLongFromJson(jsonObject, "useDate");
            mUse = Common.getLongFromJson(jsonObject, "useDate");

            mSN = Common.getStringFromJson(jsonObject, "productNo");
            mName = Common.getStringFromJson(jsonObject, "name");
            mRemark = Common.getStringFromJson(jsonObject, "remark");

            if (mDeviceType == Config.DeviceType.KDeviceTypeGateway){
                mQRCode = Common.getStringFromJson(jsonObject, "mAC");
            }
            else{
                mQRCode = String.format("%08X", (int)Common.getLongFromJson(jsonObject, "address"));
            }

            HashMap<Long, Long> status = new HashMap<>();
            if (jsonObject.has("yxList")) {
                JSONArray ja = jsonObject.getJSONArray("yxList");
                for (int i = 0; i < ja.length(); i++) {
                    JSONObject jPort = ja.getJSONObject(i);
                    Long dataId = Common.getLongFromJson(jPort, "dataId");
                    Long value = Common.getLongFromJson(jPort, "value");
                    status.put(dataId, value);
                }
            }

            long onLine = 1;
            if (jsonObject.has("online")){
                onLine = Common.getLongFromJson(jsonObject, "online");
            }

            HashMap<Long, DevicePortInfo> ports = new HashMap<>();
            if (jsonObject.has("ykList")) {
                JSONArray ja = jsonObject.getJSONArray("ykList");
                for (int i = 0; i < ja.length(); i++) {
                    JSONObject jPort = ja.getJSONObject(i);

                    if (Common.getLongFromJson(jPort, "use") == 0){
                        continue;
                    }

                    DevicePortInfo port = new DevicePortInfo();
                    port.mName = Common.getStringFromJson(jPort, "name");
                    port.mPortId = Common.getLongFromJson(jPort, "dataId");
                    port.mRoomId = Common.getLongFromJson(jPort, "roomId");
                    port.mLinkId = Common.getLongFromJson(jPort, "link");


                    if (onLine == 0){
                        port.mStatus = -1;
                    }
                    else{
                        Long value = status.get(port.mLinkId);

                        if (hasStatus) {
                            port.mStatus = (value == null ? -1L : value.longValue());
                        }
                        else {
                            DevicePortInfo oldPort = mPorts.get(port.mPortId);
                            port.mStatus = (oldPort == null ? -1L : oldPort.mStatus);
                        }
                    }

                    ports.put(port.mPortId, port);
                }
                mPorts = ports;
            }
        } catch (org.json.JSONException e) {
            e.printStackTrace();
            return;
        }
    }
}
