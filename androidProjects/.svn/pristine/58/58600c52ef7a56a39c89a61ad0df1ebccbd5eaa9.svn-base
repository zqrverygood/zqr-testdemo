package app.smarthome.zzd.smarthome.model;

import android.os.Parcel;
import android.os.Parcelable;

import com.util.Common;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.HashMap;
import java.util.Vector;

/**
 * Created by inobaa on 15/1/21.
 */
public class FamilyInfo implements Parcelable {
    public long mId = 0L;
    public long mUserId = 0L;
    public long mCreateTime = 0L;
    public String mName = "";
    public String mRemark = "";
    public Vector<String> mMemberAccounts = new Vector<>();

    @Override
    public void writeToParcel(Parcel dest, int flags) {
        dest.writeLong(mId);
        dest.writeLong(mUserId);
        dest.writeLong(mCreateTime);
        dest.writeString(mName);
        dest.writeString(mRemark);
    }

    public static final Creator<FamilyInfo> CREATOR = new Creator<FamilyInfo>() {
        public FamilyInfo createFromParcel(Parcel in) {
            FamilyInfo ui = new FamilyInfo();
            ui.mId = in.readLong();
            ui.mUserId = in.readLong();
            ui.mCreateTime = in.readLong();
            ui.mName = in.readString();
            ui.mRemark = in.readString();
            return ui;
        }

        public FamilyInfo[] newArray(int size) {
            return new FamilyInfo[size];
        }
    };

    @Override
    public int describeContents() {
        return 0;
    }

//    public void toParam(JSONObject params){
//        try{
//            params.put("id", mId);
//            params.put("userId", mUserId);
//            params.put("createTime", mCreateTime);
//            params.put("name", mName);
//            params.put("remark", mRemark);
//        }catch (JSONException e) {
//            e.printStackTrace();
//            return;
//        }
//    }
    public void fromJson(JSONObject jsonObject){
        try{
            if (jsonObject.has("id")) mId = jsonObject.getLong("id");
            else mId = 0L;
            if (jsonObject.has("userId")) mUserId = jsonObject.getLong("userId");
            else mUserId = 0L;
            if (jsonObject.has("createTime")) mCreateTime = jsonObject.getLong("createTime");
            else mCreateTime = 0L;
            if (jsonObject.has("name")) mName = jsonObject.getString("name");
            else mName = "";
            if (jsonObject.has("remark")) mRemark = jsonObject.getString("remark");
            else mRemark = "";

            if (jsonObject.has("share")){
                mMemberAccounts.clear();
                JSONArray ja = jsonObject.getJSONArray("share");
                for (int i = 0; i < ja.length(); i++) {
                    JSONObject jPort = ja.getJSONObject(i);
                    String strName = Common.getStringFromJson(jPort, "name");
                    mMemberAccounts.add(strName);
                }
            }
        }catch (JSONException e) {
            e.printStackTrace();
            return;
        }
    }

    public HashMap<Long, FamilyInfo> fromResp(JSONArray ja){
        HashMap<Long, FamilyInfo> ret = new HashMap<>();
        try{
            for (int i = 0; i < ja.length(); ++i){
                JSONObject jo = ja.getJSONObject(i);
                FamilyInfo ui = new FamilyInfo();
                ui.fromJson(jo);
                ret.put(ui.mId, ui);
            }
        }catch (JSONException e) {
            e.printStackTrace();
        }
        return ret;
    }
}
