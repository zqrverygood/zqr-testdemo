package app.smarthome.zzd.smarthome;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.Selection;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.loopj.android.http.RequestHandle;
import com.util.Common;

import org.json.JSONObject;

import java.util.Vector;

import app.smarthome.zzd.smarthome.model.FamilyInfo;
import app.smarthome.zzd.smarthome.model.SceneInfo;

/**
 * Created by zzdios on 15/11/30.
 */
public class ActivityFamilyDetail extends ActivityHeaderBase {

    public int KActivityDeleteFamilyConfirm   = 1001;

    private FamilyInfo  mFamily;
    private EditText    mEditName;
    private Vector<RelativeLayout>  mShareItems = new Vector<>();
    private LinearLayout mLyShares;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        super.setContentView(R.layout.activity_family_detail);

        mLyShares = (LinearLayout) findViewById(R.id.ly_members);
        mEditName = (EditText) findViewById(R.id.edit_name);

        Intent intent = getIntent();
        long familyId = intent.getLongExtra("family_id", 0L);
        mFamily = AppCache.mFamilies.get(familyId);
        if (mFamily == null){
            setTitle(R.string.create_family);
            mFamily = new FamilyInfo();
            for (int i = 1; i < 10; ++i){
                String strName = getString(R.string.family) + i;
                if (!AppCache.IsFamilyNameExist(strName)){
                    mEditName.setText(strName);
                    break;
                }
            }
//            mEditName.setText(getString(R.string.family) + (AppCache.mFamilies.size() + 1));
            mLyShares.setVisibility(View.GONE);
//            findViewById(R.id.txt_login_to_family).setVisibility(View.GONE);
//            findViewById(R.id.txt_del_family).setVisibility(View.GONE);
            findViewById(R.id.btn_save_family).setVisibility(View.VISIBLE);
        }
        else{
            setTitle(mFamily.mName);
            mEditName.setText(mFamily.mName);
//            findViewById(R.id.txt_login_to_family).setVisibility(View.VISIBLE);
//            findViewById(R.id.txt_del_family).setVisibility(View.VISIBLE);
            findViewById(R.id.btn_save_family).setVisibility(View.INVISIBLE);
        }

        Editable etext = mEditName.getText();
        Selection.setSelection(etext, etext.length());
        mEditName.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                if (mEditName.getText().toString().compareTo(mFamily.mName) != 0) {
                    findViewById(R.id.btn_save_family).setVisibility(View.VISIBLE);
                } else {
                    findViewById(R.id.btn_save_family).setVisibility(View.INVISIBLE);
                }
            }
        });

        findViewById(R.id.txt_add_share).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onNewShare(view);
            }
        });

        findViewById(R.id.txt_login_to_family).requestFocus();
        findViewById(R.id.txt_login_to_family).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onLoginThisFamily(view);
            }
        });

        findViewById(R.id.btn_save_family).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onSaveFamily();
            }
        });
        findViewById(R.id.txt_del_family).setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                onDeleteFamily(view);
            }
        });
        showMembers();
    }

    public void onDestroy() {
        if (sReqAddShare != null){
            sReqAddShare.cancel(true);
            sReqAddShare = null;
        }
        if (sReqDelShare != null){
            sReqDelShare.cancel(true);
            sReqDelShare = null;
        }
        if (sReqSaveName != null){
            sReqSaveName.cancel(true);
            sReqSaveName = null;
        }
        if (sReqDeleteFamily != null){
            sReqDeleteFamily.cancel(true);
            sReqDeleteFamily = null;
        }
        super.onDestroy();
    }
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        if (requestCode == KActivityDeleteFamilyConfirm && resultCode == RESULT_OK) {
            DeleteFamily();
        }
    }
    public void onLoginThisFamily(View v){
        AppCache.LoginToFamily(mFamily.mId);
    }

    private RequestHandle sReqSaveName = null;
    public void onSaveFamily(){
        final String strName = mEditName.getText().toString();

        if (Common.isNullString(strName)){
            AppInstance.MakeToast(ActivityFamilyDetail.this, getString(R.string.tip_need_name), Toast.LENGTH_LONG).show();
            return;
        }
        AppResponseHandler onSaveOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqSaveName = null;
                try {
                    JSONObject jo = arg0.getJSONArray("dataList").getJSONObject(0);
                    mFamily.fromJson(jo);
                    AppCache.mFamilies.put(mFamily.mId, mFamily);
                    AppCache.mFamilyIds.add(mFamily.mId);
                    setTitle(mFamily.mName);
                }
                catch (org.json.JSONException e) {
                    e.printStackTrace();
                    return;
                }
                Intent intent = new Intent();
                intent.setAction(Config.BoardcastZzdFamiliesUpdate);
                sendBroadcast(intent);

                AppCache.ListFamilys();

//                findViewById(R.id.txt_login_to_family).setVisibility(View.VISIBLE);
//                findViewById(R.id.txt_del_family).setVisibility(View.VISIBLE);
                findViewById(R.id.btn_save_family).setEnabled(true);
                findViewById(R.id.btn_save_family).setVisibility(View.INVISIBLE);
                mLyShares.setVisibility(View.VISIBLE);

            }

            ;

            public void onReqFailure(String msg) {
                sReqSaveName = null;
                findViewById(R.id.btn_save_family).setEnabled(true);
                AppInstance.MakeToast(ActivityFamilyDetail.this, msg, Toast.LENGTH_LONG).show();
            }
            ;
        };

        findViewById(R.id.btn_save_family).requestFocus();
        findViewById(R.id.btn_save_family).setEnabled(false);
        if (mFamily.mId > 0){
            sReqSaveName = ServerClient.UpdateFamily(mFamily.mId, strName, onSaveOK);
        }
        else{
            sReqSaveName = ServerClient.CreateFamily(strName, onSaveOK);
        }
    }

    public void onDeleteFamily(View v){
        Intent intent = new Intent();
        intent.setClass(this, ActivityPopup.class);
        intent.putExtra("title", getString(R.string.del_family) + ": " + mFamily.mName);
        intent.putExtra("content", getString(R.string.tip_del_cannot_undo));
        startActivityForResult(intent, KActivityDeleteFamilyConfirm);
    }
    private RequestHandle sReqDeleteFamily = null;
    public void DeleteFamily(){

        AppResponseHandler onDeleteOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqDeleteFamily = null;

                AppCache.mFamilies.remove(mFamily.mId);

                Intent intent = new Intent();
                intent.setAction(Config.BoardcastZzdFamiliesUpdate);
                sendBroadcast(intent);

                final AlertDialog dialog = new AlertDialog.Builder(ActivityFamilyDetail.this)
                        .setTitle(getString(R.string.del_finished))
                        .show();

                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        dialog.dismiss();

                        Intent intent = new Intent();
                        intent.putExtra("family_id", mFamily.mId);
                        intent.putExtra("family_name", mFamily.mName);
                        setResult(RESULT_OK, intent);
                        ActivityFamilyDetail.this.finish();
                    }
                }, Toast.LENGTH_LONG);
            }

            ;

            public void onReqFailure(String msg) {
                sReqDeleteFamily = null;
                AppInstance.MakeToast(ActivityFamilyDetail.this, msg, Toast.LENGTH_LONG).show();
            }

            ;
        };
        sReqDeleteFamily = ServerClient.DeleteFamily(mFamily.mId, onDeleteOK);
    }

    private RequestHandle sReqAddShare = null;
    public void onCommitNewShare(RelativeLayout rl){
        final RelativeLayout curShareLine = rl;
        final EditText et = (EditText) rl.findViewById(R.id.edit);
        final String strLoginName = et.getText().toString();
        if (Common.isNullString(strLoginName)){
            AppInstance.MakeToast(ActivityFamilyDetail.this, getString(R.string.tip_need_name), Toast.LENGTH_LONG).show();
            return;
        }

        AppResponseHandler onSaveOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqAddShare = null;

                curShareLine.findViewById(R.id.edit).setEnabled(false);
                curShareLine.findViewById(R.id.btn_right_save).setEnabled(true);
                curShareLine.findViewById(R.id.btn_right_save).setVisibility(View.INVISIBLE);
                curShareLine.findViewById(R.id.btn_right_del).setVisibility(View.VISIBLE);
                findViewById(R.id.txt_add_share).setVisibility(View.VISIBLE);

                mFamily.mMemberAccounts.add(strLoginName);
            }

            ;

            public void onReqFailure(String msg) {
                sReqAddShare = null;
                curShareLine.findViewById(R.id.btn_right_save).setEnabled(true);
                AppInstance.MakeToast(ActivityFamilyDetail.this, msg, Toast.LENGTH_LONG).show();
            }
            ;
        };

        curShareLine.findViewById(R.id.btn_right_save).setEnabled(false);
        sReqAddShare = ServerClient.ShareFamily(mFamily.mId, strLoginName, onSaveOK);
    }

    private RequestHandle sReqDelShare = null;
    public void onCommitDelShare(RelativeLayout rl){
        final RelativeLayout curShareLine = rl;
        final EditText et = (EditText) rl.findViewById(R.id.edit);
        final String strLoginName = et.getText().toString();

        AppResponseHandler onSaveOK = new AppResponseHandler() {
            public void onReqSuccess(JSONObject arg0) {
                sReqDelShare = null;

                mLyShares.removeView(curShareLine);
                mShareItems.remove(curShareLine);

                mFamily.mMemberAccounts.remove(strLoginName);
            }

            ;

            public void onReqFailure(String msg) {
                sReqDelShare = null;
                curShareLine.findViewById(R.id.btn_right_del).setEnabled(true);
                AppInstance.MakeToast(ActivityFamilyDetail.this, msg, Toast.LENGTH_LONG).show();
            }
            ;
        };

        curShareLine.findViewById(R.id.btn_right_del).setEnabled(false);
        sReqAddShare = ServerClient.ShareDeleteFamily(mFamily.mId, strLoginName, onSaveOK);
    }
    private RelativeLayout createShareItem(String strLoginName){
        LayoutInflater inflater = LayoutInflater.from(this);
        RelativeLayout rl = (RelativeLayout)inflater.inflate(R.layout.li_family_share, null);
        rl.setTag(strLoginName);
        EditText et = (EditText) rl.findViewById(R.id.edit);
        et.setTag(rl);
        et.setText(strLoginName);

        ImageButton btnSave = (ImageButton) rl.findViewById(R.id.btn_right_save);
        btnSave.setTag(rl);
        btnSave.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                RelativeLayout rlt = (RelativeLayout) view.getTag();
                onCommitNewShare(rlt);
            }
        });
        ImageButton btnDel = (ImageButton) rl.findViewById(R.id.btn_right_del);
        btnDel.setTag(rl);
        btnDel.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                RelativeLayout rlShare = (RelativeLayout) view.getTag();
                onCommitDelShare(rlShare);
            }
        });
        if (Common.isNullString(strLoginName)){
            rl.findViewById(R.id.btn_right_save).setVisibility(View.VISIBLE);
            rl.findViewById(R.id.btn_right_del).setVisibility(View.INVISIBLE);

        }
        else{
            rl.findViewById(R.id.btn_right_save).setVisibility(View.INVISIBLE);
            rl.findViewById(R.id.btn_right_del).setVisibility(View.VISIBLE);
            et.setEnabled(false);
        }
        return rl;
    };
    public void onNewShare(View v){
        RelativeLayout rl = createShareItem("");
        mShareItems.add(rl);
        mLyShares.addView(rl, mShareItems.size());
        findViewById(R.id.txt_add_share).setVisibility(View.GONE);
        EditText et = (EditText) rl.findViewById(R.id.edit);
        et.requestFocus();
    }
    private void showMembers(){
        for (RelativeLayout rl : mShareItems){
            mLyShares.removeView(rl);
        }
        mShareItems.clear();

        for (String strLoginName : mFamily.mMemberAccounts){
            RelativeLayout rl = createShareItem(strLoginName);
            mShareItems.add(rl);
            mLyShares.addView(rl, 1);
        }
    }

    public boolean HasEdit(){
        if (!mFamily.mName.equals(mEditName.getText().toString())) return true;
        return false;
    }

    public void OnHeaderLeftClick(){
        if (HasEdit()){
            new AlertDialog.Builder(this)
                    .setTitle(R.string.tip_quit_without_save)
                    .setPositiveButton(getString(R.string.action_quit), new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            finish();
                        }
                    })
                    .setNegativeButton(getString(R.string.action_cancel), null)
                    .show();
            return;
        }
        finish();
    }
}
