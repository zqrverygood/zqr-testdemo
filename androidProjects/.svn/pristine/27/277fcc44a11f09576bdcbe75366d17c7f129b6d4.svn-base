package app.smarthome.zzd.smarthome.view;

import android.annotation.TargetApi;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.os.Build;
import android.os.Handler;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.FailReason;
import com.nostra13.universalimageloader.core.display.RoundedBitmapDisplayer;
import com.nostra13.universalimageloader.core.listener.ImageLoadingListener;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.TimerTask;
import java.util.Vector;

import app.smarthome.zzd.smarthome.AppCache;
import app.smarthome.zzd.smarthome.Config;
import app.smarthome.zzd.smarthome.R;
import app.smarthome.zzd.smarthome.model.AdbannerInfo;
import app.smarthome.zzd.smarthome.model.RoomInfo;

/**
 * Created by inobaa on 15/1/30.
 */
public class AdbannerView extends ViewPager {

    public class MyViewPagerAdapter extends PagerAdapter {

        List<View> mViewLists = new ArrayList();

        public MyViewPagerAdapter()
        {
        }

        @Override
        public int getCount() {                                                                 //获得size
            if (mViewLists.size() > 1){
                return Integer.MAX_VALUE;
            }
            return mViewLists.size();
        }

        @Override
        public int getItemPosition(Object object) {
            return POSITION_NONE;
        }

        @Override
        public boolean isViewFromObject(View arg0, Object arg1) {
            // TODO Auto-generated method stub
            return arg0 == arg1;
        }

        @Override
        public void destroyItem(View view, int position, Object object)                       //销毁Item
        {
            Log.d(Config.TagForLog, "destroyItem:" + position);
            if (mViewLists.size() > 1){
                position %= mViewLists.size();
            }
            ((ViewPager) view).removeView(mViewLists.get(position));
        }

        @Override
        public Object instantiateItem(View view, int position)                                //实例化Item
        {
            Log.d(Config.TagForLog, "instantiateItem:" + position);
            if (mViewLists.size() > 1){
                position %= mViewLists.size();
            }
            View v = mViewLists.get(position);
            ((ViewPager) view).removeView(v);
            ((ViewPager) view).addView(v, 0);
            return v;
        }

    }

    public Vector<AdbannerInfo> mVecAdData = new Vector<>();
    MyViewPagerAdapter  mAdapter = new MyViewPagerAdapter();

    public AdbannerView(Context context) {
        super(context);
    }

    public AdbannerView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public void ReLoad(LayoutInflater inflater, int viewId){

        mVecAdData.clear();
        for (AdbannerInfo d : AppCache.mAdBannerData.values()){
            if (d.mViewId != viewId) continue;
            mVecAdData.add(d);
        }
        Collections.sort(mVecAdData, new Comparator<AdbannerInfo>() {
            @Override
            public int compare(AdbannerInfo t0, AdbannerInfo t1) {
                return (int)(t0.mId - t1.mId);
            }
        });

        mAdapter.mViewLists.clear();
        for (AdbannerInfo r : mVecAdData) {
            AdbannerViewItem adv = (AdbannerViewItem) inflater.inflate(R.layout.li_ad_view, null);
            mAdapter.mViewLists.add(adv);
            adv.Init(r);
//            addView(adv);
        }
        mAdapter.notifyDataSetChanged();
        setAdapter(mAdapter);
        setCurrentItem(0);

        if (mVecAdData.size() > 1){
            final Handler handler = new Handler();

            final Runnable r = new Runnable() {
                @Override
                public void run() {
                    if (mVecAdData.size() > 1){
                        int i = getCurrentItem() + 1;
                        setCurrentItem(i);
                    }
                }
            };
            final java.util.Timer timer = new java.util.Timer(true);
            TimerTask task = new TimerTask() {
                public void run() {
                    if (mVecAdData.size() <= 1) {
                        timer.cancel();
                        return;
                    }
                    handler.post(r);
                }
            };
            timer.schedule(task, 5000, 5000);
        }
    }
    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
    }
}
