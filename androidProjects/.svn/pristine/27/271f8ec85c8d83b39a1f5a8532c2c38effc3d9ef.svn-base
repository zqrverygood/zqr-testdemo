package com.util;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Point;
import android.os.Environment;
import android.util.Base64;
import android.view.WindowManager;

import com.umeng.analytics.MobclickAgent;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import org.json.JSONException;
import org.json.JSONObject;

public class Common {

    public static Long longValue(String str){
        if (isNullString(str)) return 0L;
        return Long.valueOf(str);
    }
    public static Float floatValue(String str){
        if (isNullString(str)) return 0.0f;
        return Float.valueOf(str);
    }
    public static Integer intValue(String str){
        if (isNullString(str)) return 0;
        return Integer.valueOf(str);
    }
    public static boolean isNullString(String str){
        if (str == null) return true;
        return str.length() <= 0;
    }
    public static String randomString(int length){
//        Random rnd = new Random();
//        byte[] bts = new byte[length * 2];
//        rnd.nextBytes(bts);
//        return Base64.encodeToString(bts, 0).substring(length);
        final String base = "abcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        StringBuffer sb = new StringBuffer();
        for (int i = 0; i < length; i++) {
            int number = random.nextInt(base.length());
            sb.append(base.charAt(number));
        }
        return sb.toString();
    }
    public static void saveBitmap(Bitmap bmp, String picName) {
        File f = new File(picName);
        if (f.exists()) {
            f.delete();
        }
        try {
            FileOutputStream out = new FileOutputStream(f);
            bmp.compress(Bitmap.CompressFormat.JPEG, 85, out);
            out.flush();
            out.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    public static boolean hasSdcard(){
        String state = Environment.getExternalStorageState();
        if(state.equals(Environment.MEDIA_MOUNTED)){
            return true;
        }else{
            return false;
        }
    }
	public static long getLongFromString(String val){
		try {
			return Long.parseLong(val);
		} catch (NumberFormatException e) {
			e.printStackTrace();
		}
		return 0;
	}
	public static long getLongFromJson(JSONObject json, String name) throws JSONException{
		if (json.has(name) && !json.isNull(name)) {
			return getLongFromString(json.getString(name));
		}
		return 0;
	}
	public static Date getDateByTimeString(String strTime){
		try {
			if (strTime.contains("-")) {
				SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				return df.parse(strTime);
			}
			else if (strTime.contains("/")) {
				SimpleDateFormat df = new SimpleDateFormat("yyyy/MM/dd");
				return df.parse(strTime);
			}
			else{
				return new Date(Long.parseLong(strTime));
			}
		} catch (ParseException e) {
			e.printStackTrace();
		} catch (NumberFormatException e){
			e.printStackTrace();
		}
		return new Date(System.currentTimeMillis());
	}
	
	@SuppressLint("SimpleDateFormat")
	public static String getTimeString(long lValue){
		if (lValue <= 0) {
			return "";
		}
		java.util.Date dt = new Date(lValue);
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd HH:mm");
		String sDateTime = sdf.format(dt);
		return sDateTime;
	}
	@SuppressLint("SimpleDateFormat")
	public static String getDateString(long lValue){
		if (lValue <= 0) {
			return "";
		}
		java.util.Date dt = new Date(lValue);
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy-MM-dd");
		String sDateTime = sdf.format(dt);
		return sDateTime;
	}
	@SuppressLint("SimpleDateFormat")
	public static String getDateStringDot(long lValue){
		if (lValue <= 0) {
			return "";
		}
		java.util.Date dt = new Date(lValue);
		SimpleDateFormat sdf= new SimpleDateFormat("yyyy.MM.dd");
		String sDateTime = sdf.format(dt);
		return sDateTime;
	}
	
	@SuppressLint("SimpleDateFormat")
	public static String getTimeStringMDHM(long lValue){
		if (lValue <= 0) {
			return "";
		}
		java.util.Date dt = new Date(lValue);
		SimpleDateFormat sdf= new SimpleDateFormat("MM/dd HH:mm");
		String sDateTime = sdf.format(dt);
		return sDateTime;
	}
	public static int getScreenWidth(Activity activity){
		WindowManager wm = (WindowManager) activity.getSystemService(Context.WINDOW_SERVICE);
		Point outSize = new Point(0, 0);
		wm.getDefaultDisplay().getSize(outSize);
		return outSize.x;
	}
}
